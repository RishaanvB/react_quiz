{"version":3,"sources":["components/AnswerList.js","components/Question.js","components/QuestionProgress.js","components/Answer.js","helpers/helpers.js","components/TriviaCard.js","api_calls/fetchTriviaData.js","views/QuestionView.js","assets/Star_perspective_matte_s.png","assets/trophy.svg","api_calls/fetchHighscores.js","components/FormError.js","components/Form.js","components/modals/Modal.js","components/Backdrop.js","views/ResultView.js","assets/Trophy_perspective_matte_s.png","components/Player.js","components/Players.js","views/HighscoreView.js","assets/FAQ_perspective_matte.png","views/HomeScreen.js","App.js","index.js"],"names":["AnswerList","props","className","children","Question","question","dangerouslySetInnerHTML","__html","style","margin","padding","fontSize","color","fontWeight","QuestionProgress","currentQuestion","maxRounds","width","Answer","answer","isCorrectAnswer","onHandleAnswerGiven","changeBgOnFalsePick","onClick","e","addClassName","target","classList","add","handleBtnsClickable","selector","action","document","querySelectorAll","forEach","btn","disabled","Error","getOrdinal","position","ordinals","TriviaCard","triviaData","updateScore","onHandleView","onSetCurrentQuestion","useState","isCardGone","setIsCardGone","correctAnswerGiven","setCorrectAnswerGiven","useEffect","container","i","length","appendChild","Math","random","handleBtnColorChange","changeBtnColorOnTrue","setTimeout","changeBtnColorOnFalse","handleAnswerGiven","prevQuestion","wrongAnswers","Array","map","_","index","incorrect_answers","correctAnswer","correct_answer","fetchToken","a","fetch","reponse","json","token","fetchResetToken","localStorage","getItem","response","getTriviaData","setData","amountQuestion","difficulty","fetchResponse","result","response_code","responseCode","results","console","log","then","setItem","resetToken","QuestionView","setCurrentQuestion","setTriviaData","title","triviaCards","API_URL","fetchHighscores","data","setHighscore","userData","username","score","options","method","body","JSON","stringify","headers","errors","FormError","inputLength","Form","handleScoreSubmission","isScoreSubmitted","isValid","setIsValid","input","setInput","inputEl","useRef","validate","current","focus","match","submitBtnEl","textInputEl","type","name","id","placeholder","value","onChange","ref","onSubmit","preventDefault","Modal","stopPropagation","handleClose","Backdrop","ResultView","handleView","resetGame","setisScoreSubmitted","openModal","setOpenModal","totalScorePercentage","restartGameBtnEl","displayHighscoreBtnEl","src","imgStar","alt","imgTrophy","Player","ordinal","Players","playerData","setPlayerData","displayHighscores","players","player","_id","HighscoreView","HomeScreen","imgLogo","App","gameState","setGameState","setScore","state","includes","checkGameState","point","view","homeScreen","questionScreen","resultScreen","highscoreScreen","displayScreen","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.15a425c1.chunk.js","sourcesContent":["export default function AnswerList(props) {\r\n  return <div className=\"answers-list\">{props.children}</div>;\r\n}\r\n","export default function Question(props) {\r\n  const styles = {\r\n    margin: 'auto ',\r\n    padding: '1.5rem 1rem',\r\n    fontSize: '1.2rem',\r\n    color: 'white',\r\n    fontWeight: 'lighter',\r\n  };\r\n  return (\r\n    <div className=\"container-question\">\r\n      {!props.question ? (\r\n        <h1 style={styles}>LOADING QUESTION...</h1>\r\n      ) : (\r\n        <h1\r\n          className=\"question\"\r\n          dangerouslySetInnerHTML={{ __html: props.question }}></h1>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","export default function QuestionProgress({ currentQuestion, maxRounds }) {\r\n  return (\r\n    <div className=\"progression-container\">\r\n      <div className=\"progression-bar\">\r\n        <span\r\n          style={{ width: (currentQuestion / maxRounds) * 100 + '%' }}\r\n          className=\"progress-bar-fill\"></span>\r\n      </div>\r\n      <span className=\"questions-progression-container\">\r\n        <span className=\"questions-percentage\">\r\n          {currentQuestion}{' '}\r\n          <span className=\"question-percentage-divider\">/</span> {maxRounds}\r\n        </span>\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n","function Answer({\r\n  answer,\r\n  isCorrectAnswer,\r\n  onHandleAnswerGiven,\r\n  changeBgOnFalsePick,\r\n}) {\r\n  return (\r\n    <button\r\n      onClick={(e) => onHandleAnswerGiven(e, isCorrectAnswer)}\r\n      className={\r\n        changeBgOnFalsePick === 'change'\r\n          ? 'btn btn-answer show-correct-answer'\r\n          : 'btn btn-answer '\r\n      }\r\n      dangerouslySetInnerHTML={{ __html: answer }}></button>\r\n  );\r\n}\r\n\r\nexport default Answer;\r\n","const animateButton = (target) => {\r\n  target.classList.add('animate-btn');\r\n  setTimeout(() => target.classList.remove('animate-btn'), 250);\r\n};\r\n\r\nconst addClassName = (target, className) => {\r\n  target.classList.add(className);\r\n};\r\n\r\nconst resetBtnsStyling = () => {\r\n  const answerBtns = document.querySelectorAll('.btn-answer');\r\n  answerBtns.forEach((btn) => {\r\n    btn.classList.remove('correct-answer-given');\r\n    btn.classList.remove('wrong-answer-given');\r\n  });\r\n};\r\n\r\nconst handleBtnsClickable = (selector, action) => {\r\n  const btns = document.querySelectorAll(selector);\r\n\r\n  btns.forEach((btn) => {\r\n    if (action === 'enable') {\r\n      btn.disabled = false;\r\n    } else if (action === 'disable') {\r\n      btn.disabled = true;\r\n    } else {\r\n      throw new Error(\r\n        'Second argument is incorrect or missing, choose either \"enable\" or \"disable\" '\r\n      );\r\n    }\r\n  });\r\n};\r\n\r\nconst shuffleAnswers = () => {\r\n  const containers = document.querySelectorAll('.answers-list');\r\n  containers.forEach((container) => {\r\n    for (let i = container.children.length; i >= 0; i--) {\r\n      container.appendChild(container.children[(Math.random() * i) | 0]);\r\n    }\r\n  });\r\n};\r\n\r\nconst getOrdinal = (position) => {\r\n  const ordinals = ['st', 'nd', 'rd', 'th'];\r\n  return position < 4 ? ordinals[position] : ordinals[3];\r\n};\r\n\r\nconst checkGameState = (state) => {\r\n  const gameStates = ['home', 'quiz', 'result', 'highscores'];\r\n  if (!gameStates.includes(state)) {\r\n    throw new Error(\r\n      'Invalid gamestate!!!, choose one of the following in App.js: home, quiz, result, highscores'\r\n    );\r\n  }\r\n};\r\nexport {\r\n  getOrdinal,\r\n  animateButton,\r\n  addClassName,\r\n  resetBtnsStyling,\r\n  shuffleAnswers,\r\n  handleBtnsClickable,\r\n  checkGameState,\r\n};\r\n","import { useState, useEffect } from 'react';\r\n\r\nimport AnswerList from './AnswerList';\r\nimport Question from './Question';\r\nimport QuestionProgress from './QuestionProgress';\r\nimport Answer from './Answer';\r\nimport {\r\n  addClassName,\r\n  handleBtnsClickable,\r\n  shuffleAnswers,\r\n} from '../helpers/helpers';\r\n\r\nimport '../styles/TriviaCard.css';\r\n\r\nexport const TriviaCard = ({\r\n  triviaData,\r\n  updateScore,\r\n  maxRounds,\r\n  onHandleView,\r\n  onSetCurrentQuestion,\r\n  currentQuestion,\r\n}) => {\r\n  const [isCardGone, setIsCardGone] = useState(false);\r\n  const [correctAnswerGiven, setCorrectAnswerGiven] = useState();\r\n\r\n  useEffect(() => {\r\n    shuffleAnswers();\r\n  }, []);\r\n\r\n  const changeBtnColorOnFalse = (e) => {\r\n    addClassName(e.target, 'wrong-answer-given');\r\n    setTimeout(() => {\r\n      setCorrectAnswerGiven('change');\r\n    }, 50);\r\n  };\r\n  \r\n  const changeBtnColorOnTrue = (e) => {\r\n    addClassName(e.target, 'correct-answer-given');\r\n  };\r\n  \r\n  const handleBtnAbility = () => {\r\n    handleBtnsClickable('.btn', 'disable');\r\n    setTimeout(() => {\r\n      handleBtnsClickable('.btn', 'enable');\r\n    }, 1000);\r\n  };\r\n\r\n  const handleBtnColorChange = (e, isCorrectAnswer) => {\r\n    isCorrectAnswer ? changeBtnColorOnTrue(e) : changeBtnColorOnFalse(e);\r\n  };\r\n\r\n  const handleIsGameFinished = () => {\r\n    if (currentQuestion >= maxRounds) {\r\n      setTimeout(() => {\r\n        onHandleView('result');\r\n      }, 1000);\r\n    } else if (currentQuestion < maxRounds) {\r\n      onSetCurrentQuestion((prevQuestion) => prevQuestion + 1);\r\n    }\r\n  };\r\n  \r\n  const handleAnswerGiven = (e, isCorrectAnswer) => {\r\n    handleBtnAbility();\r\n    setIsCardGone(true);\r\n    handleBtnColorChange(e, isCorrectAnswer);\r\n    isCorrectAnswer && updateScore();\r\n    handleIsGameFinished();\r\n  };\r\n\r\n  const wrongAnswers = [...Array(3)].map((_, index) => {\r\n    return (\r\n      <Answer\r\n        key={index}\r\n        answer={triviaData.incorrect_answers[index]}\r\n        onHandleAnswerGiven={handleAnswerGiven}\r\n      />\r\n    );\r\n  });\r\n\r\n  const correctAnswer = (\r\n    <Answer\r\n      answer={triviaData.correct_answer}\r\n      isCorrectAnswer={true}\r\n      onHandleAnswerGiven={handleAnswerGiven}\r\n      changeBgOnFalsePick={correctAnswerGiven}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        !isCardGone ? 'triviaCard intoView' : 'triviaCard animateCard'\r\n      }>\r\n      <Question question={triviaData.question} />\r\n      <div className=\"bottom-triviaCard\">\r\n        <QuestionProgress\r\n          currentQuestion={currentQuestion}\r\n          maxRounds={maxRounds}\r\n        />\r\n        <AnswerList>\r\n          {wrongAnswers}\r\n          {correctAnswer}\r\n        </AnswerList>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","const fetchToken = async () => {\r\n  const reponse = await fetch(\r\n    'https://opentdb.com/api_token.php?command=request'\r\n  );\r\n  const { token } = await reponse.json();\r\n  return token;\r\n};\r\n\r\nconst fetchResetToken = async () => {\r\n  const response = await fetch(\r\n    `https://opentdb.com/api_token.php?command=reset&token=${localStorage.getItem(\r\n      'token'\r\n    )}`\r\n  );\r\n  const { token } = await response.json();\r\n  return token;\r\n};\r\n\r\nexport const getTriviaData = async (\r\n  setData,\r\n  amountQuestion,\r\n  difficulty = 'easy'\r\n) => {\r\n  try {\r\n    const fetchResponse = async () => {\r\n      const token = localStorage.getItem('token');\r\n      const response = await fetch(\r\n        `https://opentdb.com/api.php?amount=${amountQuestion}&type=multiple&difficulty=${difficulty}&token=${token}`\r\n      );\r\n      const result = await response.json();\r\n      const responseCode = await result.response_code;\r\n      return [responseCode, result.results];\r\n    };\r\n\r\n    const response = await fetchResponse();\r\n\r\n    switch (response[0]) {\r\n      case 0:\r\n        // Code 0: Success Returned results successfully.\r\n        console.log('token found and getting results');\r\n        setData(response[1]);\r\n        break;\r\n      case 1:\r\n        console.log(\r\n          `Code 1: No Results Could not return results. The API doesn't have enough questions for your query. (Ex. Asking for 50 Questions in a Category that only has 20.)`\r\n        );\r\n        throw new Error('Code 1, No results could be returned');\r\n      case 2:\r\n        console.log(\r\n          `Code 2: Invalid Parameter Contains an invalid parameter. Arguements passed in aren't valid. (Ex. Amount = Five)`\r\n        );\r\n        throw new Error('Code 2, Invalid input');\r\n      case 3:\r\n        // Code 3: Token Not Found Session Token does not exist.\r\n        console.log('token not found or does not exist');\r\n        let token = await fetchToken().then((token) => token);\r\n        localStorage.setItem('token', token);\r\n        console.log('token created and stored in localstorage');\r\n        let result = await fetchResponse();\r\n        setData(result[1]);\r\n        break;\r\n\r\n      case 4:\r\n        // Code 4: Token Empty Session Token has returned all possible questions for the specified query. Resetting the Token is necessary.\r\n        console.log('token expired resetting  token');\r\n        const resetToken = await fetchResetToken().then((token) => token);\r\n        localStorage.setItem('token', resetToken);\r\n        console.log('token created and stored in localstorage');\r\n        setData(response[1]);\r\n        result = await fetchResponse();\r\n        setData(result[1]);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  } catch (err) {\r\n    console.log('Trivia data could not be loaded!');\r\n    console.log(err);\r\n  }\r\n};\r\n","import { useEffect, useState } from 'react';\r\nimport { TriviaCard } from '../components/TriviaCard';\r\n\r\nimport { getTriviaData } from '../api_calls/fetchTriviaData';\r\nfunction QuestionView({\r\n  updateScore,\r\n  onHandleView,\r\n  maxRounds,\r\n  currentQuestion,\r\n  setCurrentQuestion,\r\n}) {\r\n  const [amountQuestion, setAmountQuestion] = useState(maxRounds);\r\n  const [triviaData, setTriviaData] = useState([]);\r\n\r\n  // getting quiz data\r\n  useEffect(() => {\r\n    getTriviaData(setTriviaData, amountQuestion);\r\n  }, [amountQuestion]);\r\n\r\n  useEffect(() => {\r\n    document.title = `Question #${currentQuestion}`;\r\n  }, [currentQuestion]);\r\n\r\n  const triviaCards = triviaData.map((triviaData, index) => (\r\n    <TriviaCard\r\n      triviaData={triviaData}\r\n      key={index}\r\n      updateScore={updateScore}\r\n      maxRounds={maxRounds}\r\n      onHandleView={onHandleView}\r\n      onSetCurrentQuestion={setCurrentQuestion}\r\n      currentQuestion={currentQuestion}\r\n    />\r\n  ));\r\n  return <>{triviaCards}</>;\r\n}\r\n\r\nexport default QuestionView;\r\n","export default __webpack_public_path__ + \"static/media/Star_perspective_matte_s.cd45e3ae.png\";","export default __webpack_public_path__ + \"static/media/trophy.d62c1a9a.svg\";","\r\nconst API_URL = 'https://react-quiz-backend.herokuapp.com/users';\r\n\r\nexport const fetchHighscores = async () => {\r\n  const response = await fetch(API_URL);\r\n  const data = await response.json();\r\n  return data;\r\n};\r\n\r\nexport const setHighscore = async (data) => {\r\n  const userData = { username: data.username, score: data.score };\r\n  const options = {\r\n    method: 'POST',\r\n    body: JSON.stringify(userData),\r\n    headers: { 'Content-Type': 'application/json' },\r\n  };\r\n  try {\r\n    const result = await fetch(API_URL, options);\r\n    const data = await result.json();\r\n    console.log(data.errors);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","export default function FormError({ inputLength }) {\r\n  const error1 = \"Don't use spaces or special characters\";\r\n  const error2 = 'Should be of length 1-8';\r\n\r\n  return <p>{inputLength > 8 ? error2 : error1}</p>;\r\n}\r\n","import { setHighscore } from '../api_calls/fetchHighscores';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport FormError from './FormError';\r\nexport default function Form({\r\n  score,\r\n  handleScoreSubmission,\r\n  isScoreSubmitted,\r\n}) {\r\n  const [isValid, setIsValid] = useState(false);\r\n  const [input, setInput] = useState('');\r\n  const inputEl = useRef(null);\r\n\r\n  useEffect(() => validate());\r\n\r\n  useEffect(() => {\r\n    inputEl.current.focus();\r\n  }, []);\r\n\r\n  const validate = () => {\r\n    input.match(/^[a-zA-Z0-9_]{1,8}$/) && setIsValid(true);\r\n    !input.match(/^[a-zA-Z0-9_]{1,8}$/) && setIsValid(false);\r\n  };\r\n  const showFormError = () => (input.length > 0 && !isValid ? true : false);\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n    validate();\r\n  };\r\n\r\n  const handleSubmitScore = (e) => {\r\n    e.preventDefault();\r\n    const username = e.target.username.value;\r\n    handleScoreSubmission();\r\n    setHighscore({ username: username, score: score });\r\n  };\r\n\r\n  const submitBtnEl = (\r\n    <button\r\n      disabled={!isValid}\r\n      className={\r\n        !isValid ? 'btn-submit-score btn btn-disabled' : 'btn-submit-score btn'\r\n      }>\r\n      Submit Score\r\n    </button>\r\n  );\r\n\r\n  const textInputEl = (\r\n    <input\r\n      className=\"btn\"\r\n      type=\"text\"\r\n      name=\"username\"\r\n      id=\"username\"\r\n      placeholder=\"Your Name\"\r\n      value={input}\r\n      onChange={handleChange}\r\n      ref={inputEl}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <form\r\n        className=\"scoreForm\"\r\n        onSubmit={handleSubmitScore}\r\n        action=\"\"\r\n        method=\"POST\">\r\n        {!isScoreSubmitted && textInputEl}\r\n        {showFormError() && <FormError inputLength={input.length} />}\r\n        {!isScoreSubmitted && submitBtnEl}\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n","import '../../styles/Modal.css';\r\n\r\nconst Modal = (props) => {\r\n  return (\r\n    <section className=\"modal\" onClick={(e) => e.stopPropagation()}>\r\n      <p className=\"modal-text\">Your score has been submitted!</p>\r\n      <button\r\n        className=\"btn btn-modal\"\r\n        onClick={() => props.handleClose(false)}>\r\n        OK\r\n      </button>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","export const Backdrop = ({ children, handleClose }) => {\r\n  return (\r\n    <div className=\"backdrop\" onClick={() => handleClose(false)}>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n","import '../styles/ResultView.css';\r\n\r\nimport imgStar from '../assets/Star_perspective_matte_s.png';\r\nimport imgTrophy from '../assets/trophy.svg';\r\nimport Form from '../components/Form';\r\nimport { useEffect, useState } from 'react';\r\nimport Modal from '../components/modals/Modal';\r\nimport { Backdrop } from '../components/Backdrop';\r\n\r\nexport default function ResultView({\r\n  maxRounds,\r\n  score,\r\n  handleView,\r\n  resetGame,\r\n  setCurrentQuestion,\r\n}) {\r\n  useEffect(() => (document.title = 'Results!'));\r\n  const [isScoreSubmitted, setisScoreSubmitted] = useState(false);\r\n  const [openModal, setOpenModal] = useState(false);\r\n\r\n  const totalScorePercentage = (score / maxRounds) * 100;\r\n  const restartGameBtnEl = (\r\n    <button onClick={resetGame} className=\"btn btn-restart\" key=\"restart\">\r\n      Restart\r\n    </button>\r\n  );\r\n\r\n  const handleScoreSubmission = () => {\r\n    setisScoreSubmitted(true);\r\n    setOpenModal(true);\r\n  };\r\n  const displayHighscoreBtnEl = (\r\n    <button\r\n      onClick={() => handleView('highscores')}\r\n      className=\"btn btn-goto-highscores\"\r\n      key=\"highscore\">\r\n      Highscores\r\n    </button>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <div className=\"result-screen-container intoView\">\r\n        <section className=\"star-images-container\">\r\n          <img className=\"star-image first\" src={imgStar} alt=\"star\" />\r\n          <img className=\"star-image second\" src={imgStar} alt=\"star\" />\r\n          <img className=\"star-image third\" src={imgStar} alt=\"star\" />\r\n        </section>\r\n        <div className=\"results-tally\">\r\n          <h3>\r\n            {score}/{maxRounds}\r\n          </h3>\r\n          <h2>{totalScorePercentage}% CORRECT!</h2>\r\n        </div>\r\n        <img className=\"trophy\" src={imgTrophy} alt=\"trophy\" />\r\n        <Form\r\n          score={score}\r\n          handleScoreSubmission={handleScoreSubmission}\r\n          isScoreSubmitted={isScoreSubmitted}\r\n        />\r\n        {isScoreSubmitted && [restartGameBtnEl, displayHighscoreBtnEl]}\r\n      </div>\r\n      {openModal && (\r\n        <Backdrop handleClose={() => setOpenModal(false)}>\r\n          <Modal handleClose={() => setOpenModal(false)} />\r\n        </Backdrop>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Trophy_perspective_matte_s.a34d1ab4.png\";","import imgTrophy from '../assets/Trophy_perspective_matte_s.png';\r\n\r\nexport default function Player(props) {\r\n  return (\r\n    <div className=\"player-data \">\r\n      <p className=\"player-first\">\r\n        {props.position === 1 && (\r\n          <img className=\"player-first-icon\" src={imgTrophy} alt=\"\" />\r\n        )}\r\n        {props.position}\r\n        <span className=\"ordinal\">{props.ordinal}</span>\r\n      </p>\r\n      <p>{props.data.username}</p>\r\n      <p>{props.data.score}</p>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport Player from './Player';\r\nimport { getOrdinal } from '../helpers/helpers';\r\nimport { fetchHighscores } from '../api_calls/fetchHighscores';\r\n\r\nexport default function Players() {\r\n  const [playerData, setPlayerData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    displayHighscores();\r\n  }, []);\r\n\r\n  const displayHighscores = async () => {\r\n    const data = await fetchHighscores();\r\n    await setPlayerData(data);\r\n  };\r\n\r\n  const players = playerData.map((player, index) => (\r\n    <Player\r\n      key={player._id}\r\n      position={index + 1}\r\n      data={player}\r\n      ordinal={getOrdinal(index)}\r\n    />\r\n  ));\r\n\r\n  return <div>{players}</div>;\r\n}\r\n","import '../styles/HighscoreView.css';\r\nimport Players from '../components/Players';\r\nimport { useEffect } from 'react';\r\n\r\nexport default function HighscoreView(props) {\r\n  useEffect(() => (document.title = 'Highscores'));\r\n  return (\r\n    <div className=\"highscores-container intoView\">\r\n      <div className=\"metadata-container\">\r\n        <div className=\"highscores-metadata\">\r\n          <p>Pos.</p>\r\n          <p>Name</p>\r\n          <p>Score</p>\r\n        </div>\r\n        <div className=\"players-container\">\r\n          <Players />\r\n        </div>\r\n      </div>\r\n\r\n      <button className=\"btn\" onClick={() => props.onHandleView('home')}>\r\n        Back to Home\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/FAQ_perspective_matte.1a53285a.png\";","import { useEffect } from 'react';\r\nimport imgLogo from '../assets/FAQ_perspective_matte.png';\r\n\r\nimport '../styles/HomeScreen.css';\r\n\r\nexport default function HomeScreen(props) {\r\n  useEffect(() => {\r\n    document.title = 'Quiz Home';\r\n  });\r\n  return (\r\n    <div className=\"homescreen intoView\">\r\n      <img className=\"homescreen-logo\" src={imgLogo} alt=\"questionmark logo\" />\r\n      <h1 className=\"quiz-title\">QUIZKNOWS</h1>\r\n      <div>\r\n        <button className=\"btn btn-start\" onClick={props.resetGame}>\r\n          Start\r\n        </button>\r\n        <button\r\n          className=\"btn btn-highscores\"\r\n          onClick={() => props.onHandleView('highscores')}>\r\n          Highscores\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\r\n\r\nimport QuestionView from './views/QuestionView';\r\nimport ResultView from './views/ResultView';\r\nimport HighscoreView from './views/HighscoreView';\r\nimport HomeScreen from './views/HomeScreen';\r\nimport { useEffect, useState } from 'react';\r\nimport { checkGameState } from './helpers/helpers';\r\nfunction App() {\r\n  const [gameState, setGameState] = useState('home');\r\n  const [score, setScore] = useState(0);\r\n  const [currentQuestion, setCurrentQuestion] = useState(1);\r\n  const [maxRounds, setMaxRounds] = useState(10);\r\n\r\n  useEffect(() => {\r\n    checkGameState(gameState);\r\n  }, [gameState]);\r\n\r\n  const resetScore = () => setScore(0);\r\n  const resetGame = () => {\r\n    resetScore();\r\n    setCurrentQuestion(1);\r\n    handleView('quiz');\r\n  };\r\n\r\n  const updateScore = (point = 1) => {\r\n    setScore(score + point);\r\n  };\r\n\r\n  const handleView = (view) => {\r\n    setGameState(view);\r\n  };\r\n\r\n  const displayScreen = () => {\r\n    const homeScreen = (\r\n      <HomeScreen onHandleView={handleView} resetGame={resetGame} />\r\n    );\r\n    const questionScreen = (\r\n      <QuestionView\r\n        maxRounds={maxRounds}\r\n        score={score}\r\n        onHandleView={handleView}\r\n        updateScore={updateScore}\r\n        currentQuestion={currentQuestion}\r\n        setCurrentQuestion={setCurrentQuestion}\r\n      />\r\n    );\r\n    const resultScreen = (\r\n      <ResultView\r\n        score={score}\r\n        maxRounds={maxRounds}\r\n        handleView={handleView}\r\n        resetGame={resetGame}\r\n        setCurrentQuestion={setCurrentQuestion}\r\n      />\r\n    );\r\n    const highscoreScreen = <HighscoreView onHandleView={handleView} />;\r\n\r\n    switch (gameState) {\r\n      case 'home':\r\n        return homeScreen;\r\n      case 'quiz':\r\n        return questionScreen;\r\n      case 'result':\r\n        return resultScreen;\r\n      case 'highscores':\r\n        return highscoreScreen;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">{displayScreen()}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}